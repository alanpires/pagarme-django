openapi: 3.0.3
info:
  title: Pagar Me
  version: 1.0.0
  description: Nesse desafio você construirá uma versão simplificada de um market
    place e também um sistema de pagamentos, onde será possível comprar produtos e
    processar transações. A atividade deverá ser desenvolvida utilizando Generic Views.
paths:
  /api/accounts/:
    get:
      operationId: accounts_list
      tags:
      - accounts
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: accounts_create
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/fee/:
    get:
      operationId: fee_list
      tags:
      - fee
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fee'
          description: ''
    post:
      operationId: fee_create
      tags:
      - fee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fee'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Fee'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Fee'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fee'
          description: ''
  /api/fee/{fee_id}/:
    get:
      operationId: fee_retrieve
      parameters:
      - in: path
        name: fee_id
        schema:
          type: string
        required: true
      tags:
      - fee
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fee'
          description: ''
  /api/login/:
    post:
      operationId: login_create
      tags:
      - login
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/payables/:
    get:
      operationId: payables_list
      tags:
      - payables
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payable'
          description: ''
  /api/payment_info/:
    get:
      operationId: payment_info_list
      tags:
      - payment_info
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentInfo'
          description: ''
    post:
      operationId: payment_info_create
      tags:
      - payment_info
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentInfo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PaymentInfo'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PaymentInfo'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInfo'
          description: ''
  /api/products/:
    get:
      operationId: products_list
      tags:
      - products
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductList'
          description: ''
    post:
      operationId: products_create
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/products/{product_id}/:
    get:
      operationId: products_retrieve
      parameters:
      - in: path
        name: product_id
        schema:
          type: string
        required: true
      tags:
      - products
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
          description: ''
    put:
      operationId: products_update
      parameters:
      - in: path
        name: product_id
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductList'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
          description: ''
    patch:
      operationId: products_partial_update
      parameters:
      - in: path
        name: product_id
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductList'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
          description: ''
  /api/products/seller/{seller_id}/:
    get:
      operationId: products_seller_list
      parameters:
      - in: path
        name: seller_id
        schema:
          type: string
        required: true
      tags:
      - products
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductList'
          description: ''
  /api/transactions/:
    get:
      operationId: transactions_list
      tags:
      - transactions
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
          description: ''
    post:
      operationId: transactions_create
      tags:
      - transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Transaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
components:
  schemas:
    Fee:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        credit_fee:
          type: string
          format: decimal
          pattern: ^-?\d{0,17}(?:\.\d{0,2})?$
        debit_fee:
          type: string
          format: decimal
          pattern: ^-?\d{0,17}(?:\.\d{0,2})?$
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - credit_fee
      - debit_fee
      - id
    PatchedProductList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        description:
          type: string
        price:
          type: number
          format: double
        quantity:
          type: integer
        is_active:
          type: boolean
        seller:
          type: string
          format: uuid
          readOnly: true
    Payable:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        payment_date:
          type: string
          format: date
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,17}(?:\.\d{0,2})?$
        transaction:
          type: string
          format: uuid
        fee:
          type: string
          format: uuid
        seller:
          type: string
          format: uuid
      required:
      - fee
      - id
      - payment_date
      - seller
      - status
      - transaction
    PaymentInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        card_number_info:
          type: string
          readOnly: true
        payment_method:
          $ref: '#/components/schemas/PaymentMethodEnum'
        card_number:
          type: string
          writeOnly: true
          maxLength: 16
        cardholders_name:
          type: string
          maxLength: 30
        card_expiring_date:
          type: string
          format: date
        cvv:
          type: string
          writeOnly: true
          maxLength: 4
        is_active:
          type: boolean
          readOnly: true
        customer:
          type: string
          format: uuid
          readOnly: true
      required:
      - card_expiring_date
      - card_number
      - card_number_info
      - cardholders_name
      - customer
      - cvv
      - id
      - is_active
      - payment_method
    PaymentMethodEnum:
      enum:
      - debit
      - credit
      type: string
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        seller:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        quantity:
          type: integer
          minimum: 0
        description:
          type: string
        price:
          type: number
          format: double
        is_active:
          type: boolean
      required:
      - description
      - id
      - price
      - quantity
      - seller
    ProductList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        description:
          type: string
        price:
          type: number
          format: double
        quantity:
          type: integer
        is_active:
          type: boolean
        seller:
          type: string
          format: uuid
          readOnly: true
      required:
      - description
      - id
      - price
      - seller
    Seller:
      type: object
      properties:
        id:
          type: string
          format: uuid
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
      required:
      - id
      - products
    StatusEnum:
      enum:
      - paid
      - waiting_funds
      type: string
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        seller:
          allOf:
          - $ref: '#/components/schemas/Seller'
          writeOnly: true
        payment_info:
          allOf:
          - $ref: '#/components/schemas/PaymentInfo'
          writeOnly: true
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,17}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
      required:
      - amount
      - id
      - payment_info
      - seller
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 255
        password:
          type: string
          writeOnly: true
          maxLength: 128
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_seller:
          type: boolean
        is_admin:
          type: boolean
      required:
      - email
      - id
      - is_admin
      - is_seller
      - password
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
